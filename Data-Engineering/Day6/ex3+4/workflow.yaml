id: weather-hourly-append-upload
namespace: dev

tasks:
  - id: fetch-weather
    type: io.kestra.plugin.core.http.Request
    uri: "https://api.open-meteo.com/v1/forecast?latitude=21.0285&longitude=105.8542&current_weather=true"
    method: GET

  - id: download-csv
    type: io.kestra.plugin.gcp.gcs.Download
    from: gs://weather-bucket-j4/file.csv
    projectId: kestra-thaith
    serviceAccount: "{{kv(namespace='dev', key='cred')}}"

  - id: append-to-csv
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - weather.csv
    script: |
      import json
      import csv
      import os
      import sys
      import shutil

      # Fetch the weather data
      data = """{{ outputs["fetch-weather"]["body"] }}"""
      try:
          weather = json.loads(data)["current_weather"]
      except Exception as e:
          print("Error parsing weather data:", e, file=sys.stderr)
          sys.exit(1)

      # Define source and destination paths
      source_path = "{{ outputs['download-csv']['uri'] }}"
      destination_path = "weather.csv"

      # If file exists, copy it to the destination
      if os.path.exists(source_path):
        shutil.copy(source_path, destination_path)

      # Check if the file exists and append the new data
      file_exists = os.path.exists("{{ outputs['download-csv']['uri'] }}")
      with open("weather.csv", "a", newline="") as csv_file:
          writer = csv.DictWriter(csv_file, fieldnames=weather.keys())
          if not file_exists or os.path.getsize("{{ outputs['download-csv']['uri'] }}") == 0:
              writer.writeheader()  # Write header if file is empty
          writer.writerow(weather)  # Write new weather data to CSV

  - id: upload-to-gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs['append-to-csv'].outputFiles['weather.csv'] }}"
    projectId: kestra-thaith
    serviceAccount: "{{kv(namespace='dev', key='cred')}}"
    to: gs://weather-bucket-j4/file.csv

triggers:
  - id: hourly
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 * * * *"
    timezone: "Asia/Ho_Chi_Minh"
