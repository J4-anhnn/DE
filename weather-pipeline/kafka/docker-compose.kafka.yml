version: '3'

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - weather-net

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS=weather-events:1:1,weather-alerts:1:1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - weather-net
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  weather-producer:
    build:
      context: ..
      dockerfile: kafka/Dockerfile.producer
    container_name: weather-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - weather-net

  weather-alerts:
    build:
      context: ..
      dockerfile: kafka/Dockerfile.alerts
    container_name: weather-alerts
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EMAIL_ALERTS_ENABLED=false
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - weather-net

volumes:
  zookeeper_data:
  kafka_data:

networks:
  weather-net:
    driver: bridge
